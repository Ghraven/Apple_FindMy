from datetime import datetime
from typing import Sequence

from .anisette import BaseAnisetteProvider as BaseAnisetteProvider
from .base import (
    BaseAppleAccount as BaseAppleAccount,
)
from .base import (
    BaseSecondFactorMethod as BaseSecondFactorMethod,
)
from .base import (
    LoginState as LoginState,
)
from .keys import KeyPair as KeyPair
from .reports import KeyReport as KeyReport

class LoginError(Exception): ...
class InvalidStateError(RuntimeError): ...
class ExportRestoreError(ValueError): ...

class AsyncSmsSecondFactor(BaseSecondFactorMethod):
    def __init__(
        self,
        account: AsyncAppleAccount,
        number_id: int,
        phone_number: str,
    ) -> None: ...
    @property
    def phone_number_id(self) -> int: ...
    @property
    def phone_number(self) -> str: ...
    async def request(self) -> None: ...
    async def submit(self, code: str) -> LoginState: ...

class SmsSecondFactor(BaseSecondFactorMethod):
    def __init__(
        self,
        account: AppleAccount,
        number_id: int,
        phone_number: str,
    ) -> None: ...
    @property
    def phone_number_id(self) -> int: ...
    @property
    def phone_number(self) -> str: ...
    def request(self) -> None: ...
    def submit(self, code: str) -> LoginState: ...

class AsyncAppleAccount(BaseAppleAccount):
    def __init__(
        self,
        anisette: BaseAnisetteProvider,
        user_id: str | None = None,
        device_id: str | None = None,
    ) -> None: ...
    @property
    def login_state(self) -> LoginState: ...
    @property
    def account_name(self) -> str | None: ...
    @property
    def first_name(self) -> str | None: ...
    @property
    def last_name(self) -> str | None: ...
    def export(self) -> dict: ...
    def restore(self, data: dict) -> None: ...
    async def close(self) -> None: ...
    async def login(self, username: str, password: str) -> LoginState: ...
    async def get_2fa_methods(self) -> list[AsyncSmsSecondFactor]: ...
    async def sms_2fa_request(self, phone_number_id: int) -> None: ...
    async def sms_2fa_submit(self, phone_number_id: int, code: str) -> LoginState: ...
    async def fetch_reports(
        self,
        keys: Sequence[KeyPair],
        date_from: datetime,
        date_to: datetime,
    ) -> dict[KeyPair, list[KeyReport]]: ...
    async def fetch_last_reports(
        self,
        keys: Sequence[KeyPair],
        hours: int = ...,
    ) -> dict[KeyPair, list[KeyReport]]: ...
    async def get_anisette_headers(self, serial: str = "0") -> dict[str, str]: ...

class AppleAccount(BaseAppleAccount):
    def __init__(
        self,
        anisette: BaseAnisetteProvider,
        user_id: str | None = None,
        device_id: str | None = None,
    ) -> None: ...
    def __del__(self) -> None: ...
    @property
    def login_state(self) -> LoginState: ...
    @property
    def account_name(self) -> str: ...
    @property
    def first_name(self) -> str | None: ...
    @property
    def last_name(self) -> str | None: ...
    def export(self) -> dict: ...
    def restore(self, data: dict) -> None: ...
    def login(self, username: str, password: str) -> LoginState: ...
    def get_2fa_methods(self) -> list[SmsSecondFactor]: ...
    def sms_2fa_request(self, phone_number_id: int) -> None: ...
    def sms_2fa_submit(self, phone_number_id: int, code: str) -> LoginState: ...
    def fetch_reports(
        self,
        keys: Sequence[KeyPair],
        date_from: datetime,
        date_to: datetime,
    ) -> dict[KeyPair, list[KeyReport]]: ...
    def fetch_last_reports(
        self,
        keys: Sequence[KeyPair],
        hours: int = ...,
    ) -> dict[KeyPair, list[KeyReport]]: ...
    def get_anisette_headers(self, serial: str = "0") -> dict[str, str]: ...
